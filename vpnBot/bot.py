import logging

from email_validator import validate_email, EmailNotValidError
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes, MessageHandler,
    filters, ConversationHandler
)

from clients.cryptocloud_client import CryptocloudClient
from settings.config import SUBSCRIPTION_PRICES, TG_BOT_TOKEN, TIME, SERVERS_NAMES, SUPPORT_LINK, MAX_CLIENTS
from clients.xui_client import XUIClient
from clients.yookassa_client import YooKassaClient

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
xui = XUIClient("settings/servers.json")
yooKassaClient = YooKassaClient()
cryptocloudClient = CryptocloudClient()
DEFAULT = "germany_1"

async def post_init(application):
    await xui.login_all()

def create_keyboard(buttons) -> InlineKeyboardMarkup:
    """
    Universal function for create keyboard
    :param buttons: List with buttons format:[["Text", is_url, "callback_data_or_url"]]
    :return: InlineKeyboardMarkup
    """
    keyboard = [
        [InlineKeyboardButton(text, url=data if is_url else None, callback_data=None if is_url else data)]
        for text, is_url, data in buttons
    ]
    return InlineKeyboardMarkup(keyboard)

async def count_price(range_price: dict, server: str) -> int:
    min_price = range_price[min]
    max_price = range_price[max]
    clients = await xui.get_list_of_users(server)
    different = round((max_price - min_price) * (len(clients) / MAX_CLIENTS))
    actual_price = max_price - different
    return actual_price


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Main menu == /start
    :param update: ...
    :param context: ...
    :return: -
    """
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç! üöÄ\n\n"
        "‚úÖ –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞–¥—ë–∂–Ω—ã–π VPN-—Å–µ—Ä–≤–∏—Å\n"
        "üåê –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º –≤–æ –§—Ä–∞–Ω—Ü–∏–∏ üá´üá∑, –ì–µ—Ä–º–∞–Ω–∏–∏ üá©üá™, –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã üá≥üá±, –ò—Å–ø–∞–Ω–∏—è üá™üá∏\n"
        "‚è≥ –°—Ä–æ–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: –æ—Ç 1 –¥–Ω—è –¥–æ 6 –º–µ—Å—è—Ü–µ–≤\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å FAQ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "–£–¥–∞—á–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–µ—Ä—Ñ–∏–Ω–≥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ! üåêüòä\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    reply_markup = create_keyboard(
        [
            ["üõí –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", False, "new_subscription"],
            ["üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", False, "status"],
            ["üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", False, "renew"],
            ["üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", True, "https://t.me/RealityVPNSupportBot?start"],
            ["‚ùì FAQ", True, SUPPORT_LINK]
        ]
    )
    if update.message:
        await update.message.reply_text(
            welcome_text, reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            welcome_text, reply_markup=reply_markup
        )


async def ask_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["awaiting_email"] = True
    reply_markup = create_keyboard(
        [
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"]
        ]
    )
    message = await update.message.reply_text("üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞.",
                                              reply_markup=reply_markup)
    context.user_data["email_message_id"] = message.message_id
    context.user_data["email_chat_id"] = message.chat_id
    context.user_data["email_not_valid"] = False
    return 0


async def save_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_email"):
        return ConversationHandler.END

    email = update.message.text
    reply_markup = create_keyboard([["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"]])

    try:
        valid = validate_email(email)
        email = valid.normalized
        context.user_data["email"] = email

        await context.bot.edit_message_text(
            chat_id=context.user_data["email_chat_id"],
            message_id=context.user_data["email_message_id"],
            text=f"‚úÖ Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {email}",
            reply_markup=reply_markup
        )

        try:
            await update.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        return ConversationHandler.END

    except EmailNotValidError as e:
        error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email: {str(e)}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:"

        if not context.user_data["email_not_valid"]:
            await context.bot.edit_message_text(
                chat_id=context.user_data["email_chat_id"],
                message_id=context.user_data["email_message_id"],
                text=error_message,
                reply_markup=reply_markup
            )

        context.user_data["email_not_valid"] = True

        try:
            await update.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        return 0


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handle push button
    :param update: ...
    :param context: ...
    :return: -
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    text = ""
    reply_markup = None

    if data == "main_menu":
        await start(update, context)
        context.user_data["awaiting_email"] = False
        return ConversationHandler.END


    if data == "coming_soon":
        return

    elif data == "status":
        status = await xui.get_subscription_status(user_id)
        if status:
            text = f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            for server, server_data in status.items():
                text += (
                    f"üîí –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if server_data['active'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'}\n"
                    f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {server_data['expiry_date']}\n"
                    f"üåê –°–µ—Ä–≤–µ—Ä: {SERVERS_NAMES[server].capitalize()}\n\n"
                    f"üîë –ö–ª—é—á:\n `{await xui.get_connection_string(server_data['id'], server_data['email'], server)}`\n\n"
                )
        else:
            text = "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ üòï"

        reply_markup = create_keyboard(
            [
                ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"]
            ]
        )

    elif data == "faq":
        text = """
1) –ï—Å–ª–∏ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç '–Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞' –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, —Ç–æ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è –Ω–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫\n
2) –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∫–∞–∑–∞ –ª—É—á—à–µ –≤—Å–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ /start. –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä –≤–æ —Ñ—Ä–∞–Ω—Ü–∏–∏ —Å–æ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ = 1 –¥–µ–Ω—å.
        """

        reply_markup = create_keyboard(
            [
                ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"]
            ]
        )

    elif data in ["new_subscription", "renew"]:
        
        context.user_data["subscription_mode"] = data

        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:"
        reply_markup = create_keyboard([
            ["üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è I", False, "server-germany_1" if len(await xui.get_list_of_users("germany_1")) <= MAX_CLIENTS else "full"],
            ["üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è (üö´ coming soon)", False, "coming_soon"],
            ["üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã (üö´ coming soon)", False, "coming_soon"],
            ["üá™üá∏ –ò—Å–ø–∞–Ω–∏—è (üö´ coming soon)", False, "coming_soon"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"],
        ])

    elif data == "full":
        text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        reply_markup = create_keyboard([
            ["üîô –ù–∞–∑–∞–¥", False, context.user_data.get("subscription_mode", "new_subscription")],
        ])

    elif data.startswith("server-"):
        server = data.split("-")[1]

        context.user_data["server"] = server

        prices = {
            "1_day": await count_price(SUBSCRIPTION_PRICES['1_day'], server),
            "1_week": await count_price(SUBSCRIPTION_PRICES['1_week'], server),
            "1_month": await count_price(SUBSCRIPTION_PRICES['1_month'], server),
            "6_months": await count_price(SUBSCRIPTION_PRICES['6_months'], server)
        }

        reply_markup = create_keyboard([
            [f"1Ô∏è‚É£ 1 –î–µ–Ω—å - {prices['1_day']} —Ä—É–±", False, "1_day"],
            [f"üóì 1 –ù–µ–¥–µ–ª—è - {prices['1_week']} —Ä—É–±", False, "1_week"],
            [f"üìÜ 1 –ú–µ—Å—è—Ü - {prices['1_month']} —Ä—É–±", False, "1_month"],
            [f"‚è± 6 –ú–µ—Å—è—Ü–µ–≤ - {prices['6_months']} —Ä—É–±", False, "6_months"],
            [f"üîô –ù–∞–∑–∞–¥", False, context.user_data.get("subscription_mode", "new_subscription")],
            [f"üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"],
        ])
        text = (
            f"–°–µ—Ä–≤–µ—Ä: {SERVERS_NAMES[context.user_data.get('server', DEFAULT)].capitalize()}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"
        )

    elif data in ["1_day", "1_week", "1_month", "6_months"]:
        context.user_data["subscription_type"] = data
        server = context.user_data.get("server", DEFAULT)
        price = await count_price(SUBSCRIPTION_PRICES[data], server)
        subscription_mode = context.user_data.get("subscription_mode", "new_subscription")
        mode_text = "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" if subscription_mode == "new_subscription" else "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ"
        attention = ""


        status = await xui.get_subscription_status(user_id)
        if mode_text == "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" and status and server in status.keys():
            attention = "‚ùï –í–ù–ò–ú–ê–ù–ò–ï: T—ã –≤—ã–±—Ä–∞–ª –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞.\n–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å, —Ç–æ –ê–ö–¢–ò–í–ù–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –ü–†–û–î–õ–ò–¢–°–Ø –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π —Å—Ä–æ–∫\n\n"
        if mode_text == "–ü—Ä–æ–¥–ª–µ–Ω–∏–µ" and (not status or server not in status.keys()):
            attention = "‚ùï –í–ù–ò–ú–ê–ù–ò–ï: T—ã –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∞ –µ—â–µ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.\n–ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å, —Ç–æ –û–§–û–†–ú–ò–¢–°–Ø –ù–û–í–ê–Ø –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π —Å—Ä–æ–∫\n\n"
        text = (
            f"–¢—ã –≤—ã–±—Ä–∞–ª:\n"
            f"üåê –°–µ—Ä–≤–µ—Ä: {SERVERS_NAMES[server].capitalize()}\n"
            f"üïí –ü–µ—Ä–∏–æ–¥: {TIME[data]}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} RUB\n"
            f"üìù –¢–∏–ø: {mode_text}\n\n"
            f"{attention}"
            "–í—Å—ë –≤–µ—Ä–Ω–æ? ü§î"
        )
        reply_markup = create_keyboard([
            ["‚úÖ –î–∞", False, "confirm_payment"],
            ["‚ùå –ù–µ—Ç", False, f"server-{server}"],
        ])

    elif data == "confirm_payment":
        data = context.user_data.get("subscription_type", "1_day")
        price = await count_price(SUBSCRIPTION_PRICES[data], context.user_data.get("server", DEFAULT))

        email = context.user_data.get("email")
        if not email:
            await query.edit_message_text("‚ùå Email –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_email –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        payment = yooKassaClient.create_payment(
            amount=price,
            subscription_type=data,
            user_id=user_id,
            server=context.user_data.get("server", DEFAULT),
            chat_id=context._chat_id,
            message_id=query.message.message_id,
            user_email=email
        )

        payment_cryptomus_url = await cryptocloudClient.create_cryptocloud_payment(
            price=price,
            subscription_type=data,
            user_id=user_id,
            server=context.user_data.get("server", DEFAULT),
            chat_id=context._chat_id,
            message_id=query.message.message_id
        )

        reply_markup = create_keyboard([
            ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", True, payment.confirmation_url],
            ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", True, payment_cryptomus_url] if payment_cryptomus_url else ["üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", False, "coming_soon"],
            ["üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", False, "main_menu"],
        ])
        text=(f"–î–ª—è –æ–ø–ª–∞—Ç—ã {price} RUB –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'\n\n"
            f"P.S. –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏ –≤—ã—à–ª–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)


if __name__ == "__main__":
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("set_email", ask_email)],
        states={
            0: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_email)],
        },
        fallbacks=[CallbackQueryHandler(button_handler, pattern="main_menu")],
    )
    app = ApplicationBuilder().token(TG_BOT_TOKEN).post_init(post_init).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

SUPPORT_CHAT_ID = -4682106238

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start. –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
    """
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
    )


async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.
    –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (mapping) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
    """
    if update.effective_chat.type != "private":
        return

    try:
        await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"‚úçÔ∏è New message from user: {update.effective_user.id}")

        forwarded_message = await context.bot.forward_message(
            chat_id=SUPPORT_CHAT_ID,
            from_chat_id=update.effective_chat.id,
            message_id=update.message.message_id,
        )

        context.bot_data[str(forwarded_message.message_id)] = update.effective_user.id

        await update.message.reply_text("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    except Exception as e:
        await context.bot.send_message(
            chat_id=SUPPORT_CHAT_ID,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e.__str__()}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_manager_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (reply) –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–æ—Ç –∫–æ–ø–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """

    if update.effective_chat.id != SUPPORT_CHAT_ID:
        return

    if not update.message.reply_to_message:
        return

    user_chat_id = context.bot_data.get(str(update.message.reply_to_message.message_id))
    context.bot_data.pop(str(update.message.reply_to_message.message_id))

    try:

        # msg = await update.effective_message.copy(chat_id=user_chat_id)

        await context.bot.send_message(
            chat_id=user_chat_id,
            text=f"–û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {update.effective_message.text}"
        )
        await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", e.__str__())


if __name__ == '__main__':
    BOT_TOKEN = "8093044579:AAHgDMZ2sAHHNwg9KbptdqsPYyJQ2RHPX_k"

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, handle_user_message))
    app.add_handler(MessageHandler(filters.Chat(SUPPORT_CHAT_ID) & filters.REPLY, handle_manager_reply))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()